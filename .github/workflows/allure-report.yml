name: Run Tests and Publish Allure Report

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PROJECT: product            # top-level folder on gh-pages
  MODULE:  api                # sub-folder (api, app, web, …)
  KEEP:    20                 # how many past reports to retain
  PYTHON:  "3.10"

permissions:
  contents: write
  pull-requests: write

jobs:
  test-and-report:
    runs-on: ubuntu-latest

    steps:
      # ─────────── 1. Checkout source ───────────
      - uses: actions/checkout@v4

      # ─────────── 2. Python & deps ───────────
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # ─────────── 3. Run tests ───────────
      - name: Run tests
        run: |
          pytest tests/ -v --alluredir=allure-results

      # ─────────── 4. Pull previous history (if any) ───────────
      - name: Checkout gh-pages for history
        if: always()
        continue-on-error: true          # first run has no history
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
      - name: Copy last-history into results
        if: always()
        run: |
          HIST_PATH="gh-pages/${{ env.PROJECT }}/${{ env.MODULE }}/allure-history/last-history"
          mkdir -p allure-results/history
          [ -d "$HIST_PATH" ] && cp -r "$HIST_PATH/." allure-results/history || echo "No previous history"

      # ─────────── 5. Build report & rotate history ───────────
      - name: Build Allure report
        if: always()
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: allure-results
          allure_history: ${{ env.PROJECT }}/${{ env.MODULE }}/allure-history
          keep_reports:  ${{ env.KEEP }}   # keep only N most-recent reports

      # ─────────── 6. Extract summary (multiline-safe) ───────────
      - name: Extract Allure summary
        id: summary
        if: always()
        run: |
          SUMMARY="\
          $(jq -r '.statistic
          | "🧪 Total: \(.total)\n✅ Passed: \(.passed)\n❌ Failed: \(.failed)\n⚠️ Broken: \(.broken)\n🚫 Skipped: \(.skipped)" \
          ${{ env.PROJECT }}/${{ env.MODULE }}/allure-history/last-history/widgets/summary.json)"
          echo "summary<<EOF" >> "$GITHUB_OUTPUT"
          echo "$SUMMARY"           >> "$GITHUB_OUTPUT"
          echo "EOF"                >> "$GITHUB_OUTPUT"

      # ─────────── 7. Publish to GitHub Pages ───────────
      - name: Publish report to gh-pages
        if: always()
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token:   ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir:    ${{ env.PROJECT }}/${{ env.MODULE }}/allure-history
          keep_files:     true                       # keeps other project/module folders
          commit_message: "ci: Allure report for run #${{ github.run_number }}"

      # ─────────── 8. Wait for the site to go live ───────────
      - name: Wait for GitHub Pages
        if: always()
        run: |
          URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.PROJECT }}/${{ env.MODULE }}/${{ github.run_number }}/"
          echo "Report URL: $URL"
          for i in {1..12}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            [ "$STATUS" = 200 ] && { echo "Live 🚀"; exit 0; }
            echo "Status $STATUS – retrying…"; sleep 10
          done
          echo "::warning ::Page still not up after 2 min"

      # ─────────── 9. PR comment (only on PRs) ───────────
      - name: Comment on PR with link & summary
        if: ${{ github.event_name == 'pull_request' }}
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🔗 **Allure Test Report:** [View](
            https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.PROJECT }}/${{ env.MODULE }}/${{ github.run_number }}/)

            **Test Summary**
            ${{ steps.summary.outputs.summary }}