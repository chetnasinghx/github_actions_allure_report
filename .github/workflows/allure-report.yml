name: Run Tests and Publish Allure Report with History

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# ──────────────────────────────  GLOBAL CONFIG  ──────────────────────────────
env:
  PRODUCT: product          # top-level directory (e.g. product, projectX)
  MODULE: api               # sub-directory   (e.g. api, web, app)
  PYTHON_VERSION: "3.10"
  ALLURE_VERSION: "2.34.0"

permissions:
  contents: write            # push to gh-pages
  pull-requests: write       # post PR comment
  id-token: write            # required by gh-pages action

# cancel older runs on same branch/PR
concurrency:
  group: ci-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ github.workspace }}

    steps:
    # ──────────────────────────  SOURCE & PYTHON SETUP  ──────────────────────────
    - name: 🧾 Checkout source
      uses: actions/checkout@v4
      with:
        fetch-depth: 0                                # full history (coverage, links)

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: pip                                    # speed-up subsequent runs

    - name: 📦 Install dependencies
      run: |
        set -e
        REQ_FILE="${PRODUCT}/${MODULE}/requirements.txt"
        python -m pip install --upgrade pip
        if [[ -f "$REQ_FILE" ]]; then
          echo "Installing deps from $REQ_FILE"
          pip install -r "$REQ_FILE"
        else
          echo "::error::requirements.txt not found at $REQ_FILE"
          exit 1
        fi
        pip install allure-pytest                      # guarantees allure markers

    # ────────────────────────────  TEST EXECUTION  ─────────────────────────────
    - name: 🧪 Run pytest (Allure)
      id: run_tests
      continue-on-error: true                          # still build report on failure
      run: |
        set -eo pipefail
        TEST_DIR="${PRODUCT}/${MODULE}/tests"
        [[ -d "$TEST_DIR" ]] || { echo "::error::No tests in $TEST_DIR"; exit 1; }
        pytest "$TEST_DIR" -v --alluredir=allure-results

    # ────────────────────────────  HISTORY RESTORE  ────────────────────────────
    - name: 📂 Checkout gh-pages (for history)
      if: always()
      uses: actions/checkout@v4
      with:
        ref: gh-pages
        path: gh-pages

    - name: ♻️ Restore previous Allure history
      if: always()
      run: |
        HISTORY_DIR="gh-pages/${PRODUCT}/${MODULE}/last-history"
        if [[ -d "$HISTORY_DIR" ]]; then
          mkdir -p allure-results/history
          cp -r "$HISTORY_DIR/." allure-results/history/
          echo "✅ History copied from $HISTORY_DIR"
        else
          echo "ℹ️ No history found for this module."
        fi

    # ─────────────────────────────  ALLURE CLI  ────────────────────────────────
    - name: ☕ Set up Java (Allure CLI needs it)
      uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: "17"

    - name: ⚙️ Install Allure CLI
      run: |
        wget -qO allure.tgz "https://repo1.maven.org/maven2/io/qameta/allure/allure-commandline/${ALLURE_VERSION}/allure-commandline-${ALLURE_VERSION}.tgz"
        tar -xzf allure.tgz
        echo "${PWD}/allure-${ALLURE_VERSION}/bin" >> "$GITHUB_PATH"

    - name: 🧱 Generate Allure report
      if: always()
      run: |
        allure generate allure-results --clean -o allure-report

    # ─────────────────────────────  SAVE HISTORY  ──────────────────────────────
    - name: 💾 Persist history for next run
      if: always()
      run: |
        mkdir -p gh-pages/${PRODUCT}/${MODULE}/last-history
        cp -r allure-report/history/. gh-pages/${PRODUCT}/${MODULE}/last-history/

    # ─────────────────────────────  COPY REPORT  ───────────────────────────────
    - name: 📤 Copy report to versioned folder
      if: always()
      run: |
        TARGET="gh-pages/${PRODUCT}/${MODULE}/${{ github.run_number }}"
        mkdir -p "$TARGET"
        cp -r allure-report/. "$TARGET/"

    # ─────────────────────────────  DEPLOY PAGES  ──────────────────────────────
    - name: 🚀 Deploy to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v4
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: gh-pages
        publish_branch: gh-pages
        commit_message: "ci: Allure report ${{ env.PRODUCT }}/${{ env.MODULE }} run #${{ github.run_number }}"

    # ─────────────────────────────  WAIT FOR PAGES  ────────────────────────────
    - name: ⏳ Wait for GitHub Pages to become available
      if: always()
      run: |
        REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${PRODUCT}/${MODULE}/${{ github.run_number }}/"
        echo "Waiting for GitHub Pages…"
        echo "Report link: $REPORT_URL"
        for i in {1..10}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$REPORT_URL")
          if [[ "$HTTP_STATUS" == "200" ]]; then
            echo "✅ Site is live!"
            break
          else
            echo "Status $HTTP_STATUS — retry in 10 s ($i/10)…"
            sleep 10
          fi
        done

    # ───────────────────────  SUMMARY & PR COMMENT  ───────────────────────────
    - name: 📊 Extract Allure summary
      if: always()
      id: summary
      run: |
        SUMMARY_FILE="allure-report/widgets/summary.json"
        NEWLINE=$'\n'
        if [[ -f "$SUMMARY_FILE" ]]; then
          STATS=$(jq -r '.statistic |
            "🧪 Total: \(.total)\n✅ Passed: \(.passed)\n❌ Failed: \(.failed)\n⚠️ Broken: \(.broken)\n🚫 Skipped: \(.skipped)"' "$SUMMARY_FILE")
          echo "result<<EOF${NEWLINE}${STATS}${NEWLINE}EOF" >> "$GITHUB_OUTPUT"
        else
          echo "result<<EOF${NEWLINE}⚠️ Allure summary not found${NEWLINE}EOF" >> "$GITHUB_OUTPUT"
        fi

    - name: 💬 Comment test summary on PR
      if: ${{ github.event_name == 'pull_request' }}
      uses: peter-evans/create-or-update-comment@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        issue-number: ${{ github.event.pull_request.number }}
        body: |
          🔗 **Allure Report:** [Open Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ env.PRODUCT }}/${{ env.MODULE }}/${{ github.run_number }}/)

          **Test Summary**
          ```
          ${{ steps.summary.outputs.result }}
          ```