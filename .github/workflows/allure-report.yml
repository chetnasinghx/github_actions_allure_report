name: Run Tests and Publish Allure Report

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  pull-requests: write

jobs:
  test-and-report:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests and Save Summary
        run: |
          pytest tests/ -v --alluredir=allure-results | tee result.log
          tail -n 50 result.log | grep -E "passed|failed|skipped|warnings|in " > pytest-summary.txt

      - name: Read Pytest Summary
        id: summary
        run: |
          SUMMARY=$(cat pytest-summary.txt | paste -sd "," -)
          echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

      - name: Checkout gh-pages branch for report history
        uses: actions/checkout@v4
        if: always()
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build Allure Test Report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_history: allure-history
          allure_results: allure-results

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3.9.3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history
          commit_message: "ci: Allure report for run #${{ github.run_number }}"

      - name: Wait for GitHub Pages to become available
        if: always()
        run: |
          REPORT_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.run_number }}/"
          echo "Waiting for GitHub Pages to be available..."
          echo "Report Link: $REPORT_URL"
          for i in {1..10}; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$REPORT_URL")
            if [ "$HTTP_STATUS" -eq 200 ]; then
              echo "GitHub Pages is live!"
              break
            else
              echo "Status: $HTTP_STATUS. Retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Comment on PR with Allure Report and Pytest Summary
        if: always() && github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v3.1.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ðŸ§ª **Allure Test Report**: [View Report](https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/${{ github.run_number }}/)

            âœ… **Pytest Summary**
            `${{ steps.summary.outputs.summary }}